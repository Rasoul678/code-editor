{"version":3,"file":"static/js/796.a107dd9d.chunk.js","mappings":"4MACO,IAAMA,EAAgB,CAC3BC,MAAO,CAAC,UACRC,cAAe,gBACfC,QAAS,CAAC,OAAQ,MAClBC,UAAW,CACTC,MAAO,CAAC,SACRC,MAAO,CAAC,SACRC,MAAO,CAAC,SACRC,GAAI,CAAC,SACLC,GAAI,CAAC,SACLC,GAAI,CAAC,UAEPC,UAAW,CACTC,KAAM,CAAC,OAAQ,QAAS,SAAU,OAAQ,MAAO,QACjDC,KAAM,CAAC,OAAQ,SACfC,IAAK,CAAC,OAAQ,SACdC,SAAU,CAAC,OAAQ,UAErBC,SAAU,CACR,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,SACA,KACA,IACA,MACA,OACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,IACA,KACA,KACA,QACA,QACA,QACA,QACA,aACA,KACA,KACA,KACA,MACA,IACA,OACA,MACA,KACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,SACA,UACA,UACA,UACA,SACA,aACA,OACA,MACA,OACA,MACA,OACA,QACA,OACA,OACA,MACA,SAEFC,WAAY,CACVC,EAAG,CAAC,QACJC,IAAK,CAAC,MAAO,YACbC,MAAO,CACL,CAAC,OAAQ,YACT,CAAC,YAAY,IAEfC,GAAI,CAAC,CAAC,YAAa,mBACnBC,IAAK,CAAC,YAAa,YACnBC,WAAY,CAAC,QACbC,IAAK,CAAC,QACNC,IAAK,CAAC,QACNC,EAAG,CAAC,QACJ,IAAK,CACH,OACA,SACA,gBACA,YACA,SACA,QACA,MACA,kBACA,aACA,YACA,iBACA,OACA,SACA,cACA,cACA,OACA,UACA,UACA,UACA,QACA,OACA,UACA,QACA,UACA,SACA,WACA,MACA,WACA,UACA,UACA,QACA,UACA,SACA,WACA,SACA,QACA,KACA,QACA,OACA,YACA,QACA,SACA,WACA,OACA,SACA,UACA,SACA,OACA,SACA,WACA,MACA,MACA,OACA,UACA,QACA,QACA,WACA,QACA,OACA,OACA,QACA,UACA,WACA,SACA,QACA,OACA,SACA,SACA,QACA,SACA,QACA,aAGJC,SAAU,CACR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","sources":["../node_modules/hast-util-sanitize/lib/schema.js","../node_modules/hast-util-sanitize/lib/index.js","../node_modules/rehype-sanitize/index.js"],"sourcesContent":["/** @type {import('./index.js').Schema} */\nexport const defaultSchema = {\n  strip: ['script'],\n  clobberPrefix: 'user-content-',\n  clobber: ['name', 'id'],\n  ancestors: {\n    tbody: ['table'],\n    tfoot: ['table'],\n    thead: ['table'],\n    td: ['table'],\n    th: ['table'],\n    tr: ['table']\n  },\n  protocols: {\n    href: ['http', 'https', 'mailto', 'xmpp', 'irc', 'ircs'],\n    cite: ['http', 'https'],\n    src: ['http', 'https'],\n    longDesc: ['http', 'https']\n  },\n  tagNames: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'br',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'a',\n    'pre',\n    'code',\n    'img',\n    'tt',\n    'div',\n    'ins',\n    'del',\n    'sup',\n    'sub',\n    'p',\n    'ol',\n    'ul',\n    'table',\n    'thead',\n    'tbody',\n    'tfoot',\n    'blockquote',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'var',\n    'hr',\n    'ruby',\n    'rt',\n    'rp',\n    'li',\n    'tr',\n    'td',\n    'th',\n    's',\n    'strike',\n    'summary',\n    'details',\n    'caption',\n    'figure',\n    'figcaption',\n    'abbr',\n    'bdo',\n    'cite',\n    'dfn',\n    'mark',\n    'small',\n    'span',\n    'time',\n    'wbr',\n    'input'\n  ],\n  attributes: {\n    a: ['href'],\n    img: ['src', 'longDesc'],\n    input: [\n      ['type', 'checkbox'],\n      ['disabled', true]\n    ],\n    li: [['className', 'task-list-item']],\n    div: ['itemScope', 'itemType'],\n    blockquote: ['cite'],\n    del: ['cite'],\n    ins: ['cite'],\n    q: ['cite'],\n    '*': [\n      'abbr',\n      'accept',\n      'acceptCharset',\n      'accessKey',\n      'action',\n      'align',\n      'alt',\n      'ariaDescribedBy',\n      'ariaHidden',\n      'ariaLabel',\n      'ariaLabelledBy',\n      'axis',\n      'border',\n      'cellPadding',\n      'cellSpacing',\n      'char',\n      'charOff',\n      'charSet',\n      'checked',\n      'clear',\n      'cols',\n      'colSpan',\n      'color',\n      'compact',\n      'coords',\n      'dateTime',\n      'dir',\n      'disabled',\n      'encType',\n      'htmlFor',\n      'frame',\n      'headers',\n      'height',\n      'hrefLang',\n      'hSpace',\n      'isMap',\n      'id',\n      'label',\n      'lang',\n      'maxLength',\n      'media',\n      'method',\n      'multiple',\n      'name',\n      'noHref',\n      'noShade',\n      'noWrap',\n      'open',\n      'prompt',\n      'readOnly',\n      'rel',\n      'rev',\n      'rows',\n      'rowSpan',\n      'rules',\n      'scope',\n      'selected',\n      'shape',\n      'size',\n      'span',\n      'start',\n      'summary',\n      'tabIndex',\n      'target',\n      'title',\n      'type',\n      'useMap',\n      'vAlign',\n      'value',\n      'vSpace',\n      'width',\n      'itemProp'\n    ]\n  },\n  required: {\n    input: {\n      type: 'checkbox',\n      disabled: true\n    }\n  }\n}\n","/**\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Properties} Properties\n * @typedef {Parent['children'][number]|Root} Node\n *\n * @typedef {Properties[string]} PropertyValue Possible property values\n * @typedef {string|number|boolean} PrimitivePropertyValue Possible primitive HTML attribute values\n * @typedef {string|[string, ...PrimitivePropertyValue[]]} AttributeValue\n * @typedef {Object.<string, Array.<PrimitivePropertyValue>>} AttributeMap\n *\n * @typedef Schema Sanitization configuration\n * @property {Object<string, Array<AttributeValue>>} [attributes] Map of tag names to allowed property names. The special '*' key defines property names allowed on all elements\n * @property {Object<string, Object<string, PropertyValue>>} [required] Map of tag names to required property names and their default property value\n * @property {Array.<string>} [tagNames] List of allowed tag names\n * @property {Object<string, Array.<string>>} [protocols] Map of protocols to allow in property values\n * @property {Object<string, Array.<string>>} [ancestors] Map of tag names to their required ancestor elements\n * @property {Array.<string>} [clobber] List of allowed property names which can clobber\n * @property {string} [clobberPrefix] Prefix to use before potentially clobbering property names\n * @property {Array.<string>} [strip] Names of elements to strip from the tree\n * @property {boolean} [allowComments] Whether to allow comments\n * @property {boolean} [allowDoctypes] Whether to allow doctypes\n *\n * @typedef {(schema: Schema, value: unknown, node: Node, stack: Array.<string>) => unknown} Handler\n * @typedef {Object.<string, Handler>} NodeDefinition\n * @typedef {((schema: Schema, node: Node) => NodeDefinition)} NodeDefinitionGetter\n * @typedef {Object.<string, NodeDefinition|NodeDefinitionGetter>} NodeSchema\n */\n\nimport {defaultSchema} from './schema.js'\n\nvar own = {}.hasOwnProperty\nvar push = [].push\n\n/** @type {NodeSchema} */\nvar nodeSchema = {\n  root: {children: all},\n  doctype: handleDoctype,\n  comment: handleComment,\n  element: {\n    tagName: handleTagName,\n    properties: handleProperties,\n    children: all\n  },\n  text: {value: handleValue},\n  '*': {data: allow, position: allow}\n}\n\n/**\n * Utility to sanitize a tree\n *\n * @param {Node} node Hast tree to sanitize\n * @param {Schema} [schema] Schema defining how to sanitize - defaults to Github style sanitation\n */\nexport function sanitize(node, schema) {\n  /** @type {Node} */\n  var ctx = {type: 'root', children: []}\n  /** @type {Node|Array.<Node>} */\n  var replace\n\n  if (node && typeof node === 'object' && node.type) {\n    replace = one(Object.assign({}, defaultSchema, schema || {}), node, [])\n\n    if (replace) {\n      if (Array.isArray(replace)) {\n        if (replace.length === 1) {\n          ctx = replace[0]\n        } else {\n          // @ts-ignore Assume `root` is not a child.\n          ctx.children = replace\n        }\n      } else {\n        ctx = replace\n      }\n    }\n  }\n\n  return ctx\n}\n\n/**\n * Sanitize `node`.\n *\n * @param {Schema} schema\n * @param {Node} node\n * @param {Array.<string>} stack\n * @returns {Node|Array.<Node>|null}\n */\nfunction one(schema, node, stack) {\n  var type = node && node.type\n  /** @type {Node} */\n  // @ts-ignore rest of props added later.\n  var replacement = {type: node.type}\n  /** @type {boolean} */\n  var replace\n  /** @type {NodeDefinition|NodeDefinitionGetter} */\n  var definition\n  /** @type {NodeDefinition} */\n  var allowed\n  /** @type {unknown} */\n  var result\n  /** @type {string} */\n  var key\n\n  if (own.call(nodeSchema, type)) {\n    definition = nodeSchema[type]\n\n    if (typeof definition === 'function') {\n      definition = definition(schema, node)\n    }\n\n    if (definition) {\n      replace = true\n      allowed = Object.assign({}, definition, nodeSchema['*'])\n\n      for (key in allowed) {\n        if (own.call(allowed, key)) {\n          result = allowed[key](schema, node[key], node, stack)\n\n          // eslint-disable-next-line max-depth\n          if (result === false) {\n            replace = null\n            // Set the non-safe value.\n            replacement[key] = node[key]\n          } else if (result !== undefined && result !== null) {\n            replacement[key] = result\n          }\n        }\n      }\n    }\n  }\n\n  if (replace) {\n    return replacement\n  }\n\n  return replacement.type === 'element' &&\n    !schema.strip.includes(replacement.tagName)\n    ? replacement.children\n    : null\n}\n\n/**\n * Sanitize `children`.\n *\n * @type {Handler}\n * @param {Array.<Node>} children\n * @returns {Array.<Node>}\n */\nfunction all(schema, children, node, stack) {\n  /** @type {Array.<Node>} */\n  var results = []\n  var index = -1\n  /** @type {Node|Array.<Node>} */\n  var value\n\n  if (Array.isArray(children)) {\n    if (node.type === 'element') {\n      stack.push(node.tagName)\n    }\n\n    while (++index < children.length) {\n      value = one(schema, children[index], stack)\n\n      if (value) {\n        if ('length' in value) {\n          push.apply(results, value)\n        } else {\n          results.push(value)\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      stack.pop()\n    }\n  }\n\n  return results\n}\n\n/** @type {NodeDefinitionGetter} */\nfunction handleDoctype(schema) {\n  return schema.allowDoctypes ? {name: handleDoctypeName} : null\n}\n\n/** @type {NodeDefinitionGetter} */\nfunction handleComment(schema) {\n  return schema.allowComments ? {value: handleCommentValue} : null\n}\n\n/**\n * Sanitize `properties`.\n *\n * @type {Handler}\n * @param {Properties} properties\n * @returns {Properties}\n */\nfunction handleProperties(schema, properties, node, stack) {\n  var name = handleTagName(schema, node.tagName, node, stack)\n  /* c8 ignore next */\n  var reqs = schema.required || {}\n  var props = properties || {}\n  var allowed = Object.assign(\n    {},\n    toPropertyValueMap(schema.attributes['*']),\n    toPropertyValueMap(\n      name && own.call(schema.attributes, name) ? schema.attributes[name] : []\n    )\n  )\n  /** @type {Properties} */\n  var result = {}\n  /** @type {Array.<PrimitivePropertyValue>} */\n  var definition\n  /** @type {PropertyValue} */\n  var value\n  /** @type {string} */\n  var key\n\n  for (key in props) {\n    if (own.call(props, key)) {\n      if (own.call(allowed, key)) {\n        definition = allowed[key]\n      } else if (data(key) && own.call(allowed, 'data*')) {\n        definition = allowed['data*']\n      } else {\n        continue\n      }\n\n      value = props[key]\n      value = Array.isArray(value)\n        ? handlePropertyValues(schema, value, key, definition)\n        : handlePropertyValue(schema, value, key, definition)\n\n      if (value !== undefined && value !== null) {\n        result[key] = value\n      }\n    }\n  }\n\n  if (name && own.call(reqs, name)) {\n    for (key in reqs[name]) {\n      if (!own.call(result, key)) {\n        result[key] = reqs[name][key]\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Always return a valid HTML5 doctype.\n *\n * @type {Handler}\n * @returns {string}\n */\nfunction handleDoctypeName() {\n  return 'html'\n}\n\n/**\n * Sanitize `tagName`.\n *\n * @type {Handler}\n * @returns {string|false}\n */\nfunction handleTagName(schema, tagName, _, stack) {\n  var name = typeof tagName === 'string' ? tagName : ''\n  var index = -1\n\n  if (!name || name === '*' || !schema.tagNames.includes(name)) {\n    return false\n  }\n\n  // Some nodes can break out of their context if they don’t have a certain\n  // ancestor.\n  if (own.call(schema.ancestors, name)) {\n    while (++index < schema.ancestors[name].length) {\n      if (stack.includes(schema.ancestors[name][index])) {\n        return name\n      }\n    }\n\n    return false\n  }\n\n  return name\n}\n\n/**\n * See <https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments>\n *\n * @type {Handler}\n * @returns {string}\n */\nfunction handleCommentValue(_, value) {\n  /** @type {string} */\n  var result = typeof value === 'string' ? value : ''\n  var index = result.indexOf('-->')\n  return index < 0 ? result : result.slice(0, index)\n}\n\n/**\n * Sanitize `value`.\n *\n * @type {Handler}\n * @returns {string}\n */\nfunction handleValue(_, value) {\n  return typeof value === 'string' ? value : ''\n}\n\n/**\n * Allow `value`.\n *\n * @type {Handler}\n */\nfunction allow(_, value) {\n  return value\n}\n\n/**\n * Sanitize a property value which is a list.\n *\n * @param {Schema} schema\n * @param {Array.<unknown>} values\n * @param {string} prop\n * @param {Array.<PrimitivePropertyValue>} definition\n * @returns {Array.<string|number>}\n */\nfunction handlePropertyValues(schema, values, prop, definition) {\n  var index = -1\n  /** @type {Array.<string|number>} */\n  var result = []\n  /** @type {PropertyValue} */\n  var value\n\n  while (++index < values.length) {\n    value = handlePropertyValue(schema, values[index], prop, definition)\n\n    if (value !== undefined && value !== null) {\n      // @ts-ignore Assume no booleans were in arrays.\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Sanitize a property value.\n *\n * @param {Schema} schema\n * @param {unknown} value\n * @param {string} prop\n * @param {Array.<PropertyValue>} definition\n * @returns {PropertyValue}\n */\nfunction handlePropertyValue(schema, value, prop, definition) {\n  if (\n    (typeof value === 'boolean' ||\n      typeof value === 'number' ||\n      typeof value === 'string') &&\n    safeProtocol(schema, value, prop) &&\n    (definition.length === 0 || definition.includes(value))\n  ) {\n    return schema.clobber.includes(prop) ? schema.clobberPrefix + value : value\n  }\n}\n\n/**\n * Check whether `value` is a safe URL.\n *\n * @param {Schema} schema\n * @param {unknown} value\n * @param {string} prop\n * @returns {boolean}\n */\nfunction safeProtocol(schema, value, prop) {\n  var url = String(value)\n  var colon = url.indexOf(':')\n  var questionMark = url.indexOf('?')\n  var numberSign = url.indexOf('#')\n  var slash = url.indexOf('/')\n  var protocols = own.call(schema.protocols, prop)\n    ? schema.protocols[prop].concat()\n    : []\n  var index = -1\n\n  if (\n    protocols.length === 0 ||\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign)\n  ) {\n    return true\n  }\n\n  while (++index < protocols.length) {\n    if (\n      colon === protocols[index].length &&\n      url.slice(0, protocols[index].length) === protocols[index]\n    ) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Create a map from a list of props or a list of properties and values.\n *\n * @param {Array.<AttributeValue>} values\n * @returns {AttributeMap}\n */\nfunction toPropertyValueMap(values) {\n  /** @type {AttributeMap} */\n  var result = {}\n  var index = -1\n  /** @type {AttributeValue} */\n  var value\n\n  while (++index < values.length) {\n    value = values[index]\n\n    if (Array.isArray(value)) {\n      result[value[0]] = value.slice(1)\n    } else {\n      result[value] = []\n    }\n  }\n\n  return result\n}\n\n/**\n * Check if `prop` is a data property.\n *\n * @param {string} prop\n * @returns {boolean}\n */\nfunction data(prop) {\n  return prop.length > 4 && prop.slice(0, 4).toLowerCase() === 'data'\n}\n","/**\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('hast-util-sanitize').Schema} Options\n *   The sanitation schema defines how and if nodes and properties should be cleaned.\n *   See `hast-util-sanitize`.\n *   The default schema is exported as `defaultSchema`.\n */\n\nimport {sanitize as hastUtilSanitize, defaultSchema} from 'hast-util-sanitize'\n\n/**\n * Plugin to sanitize HTML.\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root, Root>}\n */\nexport default function rehypeSanitize(options = defaultSchema) {\n  // @ts-expect-error: assume input `root` matches output root.\n  return (tree) => hastUtilSanitize(tree, options)\n}\n\nexport {defaultSchema} from 'hast-util-sanitize'\n"],"names":["defaultSchema","strip","clobberPrefix","clobber","ancestors","tbody","tfoot","thead","td","th","tr","protocols","href","cite","src","longDesc","tagNames","attributes","a","img","input","li","div","blockquote","del","ins","q","required","type","disabled","own","hasOwnProperty","push","nodeSchema","root","children","all","doctype","schema","allowDoctypes","name","handleDoctypeName","comment","allowComments","value","handleCommentValue","element","tagName","handleTagName","properties","node","stack","definition","key","reqs","props","allowed","Object","assign","toPropertyValueMap","call","result","prop","length","slice","toLowerCase","undefined","Array","isArray","handlePropertyValues","handlePropertyValue","text","_","data","allow","position","sanitize","replace","ctx","one","replacement","includes","results","index","apply","pop","indexOf","values","url","String","colon","questionMark","numberSign","slash","concat","safeProtocol","rehypeSanitize","options","tree","hastUtilSanitize"],"sourceRoot":""}